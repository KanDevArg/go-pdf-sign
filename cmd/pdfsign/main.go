package main

import (
	"bytes"
	"crypto"
	"crypto/sha256"
	"encoding/asn1"
	"encoding/hex"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"time"

	pdfcpu "github.com/pdfcpu/pdfcpu/pkg/api"
	pdf "github.com/pdfcpu/pdfcpu/pkg/pdfcpu"

	rfc3161 "github.com/clocklock/go-rfc3161"
	PDFCPULog "github.com/pdfcpu/pdfcpu/pkg/log"
	pdfsign "github.com/philhug/go-pdf-sign/pkg/pdf-sign"
)

func createAnnotation(xRefTable *pdf.XRefTable, value pdf.IndirectRef) (*pdf.IndirectRef, error) {

	d := pdf.Dict(map[string]pdf.Object{
		"Type":    pdf.Name("Annot"),
		"Subtype": pdf.Name("Widget"),
		"Rect":    pdf.NewIntegerArray(0, 0, 0, 0),
		"FT":      pdf.Name("Sig"),                 //assistive tech
		"T":       pdf.StringLiteral("Signature1"), //field name
		"V":       value,
		"F":       pdf.Integer(4), // Flags=
		//"P": 0, //Page
	})

	return xRefTable.IndRefForNewObject(d)
}

func doSign() error {
	if len(os.Args) != 3 {
		panic("usage: xxx test.pdf out.pdf")
	}
	fi, err := os.Open(os.Args[1])
	if err != nil {
		panic(err)
	}
	defer fi.Close()
	fo, err := os.Create(os.Args[2])
	if err != nil {
		panic(err)
	}
	defer fo.Close()
	conf := pdf.Configuration{}
	c, err := pdfcpu.ReadContext(fi, &conf)
	if err != nil {
		panic(err)
	}

	//fmt.Println(c)
	br := pdf.NewIntegerArray(10000000, 10000000, 10000000, 10000000)

	pkcs7, _ := hex.DecodeString
	v := pdf.Dict(map[string]pdf.Object{
		"ByteRange":   br,
		"ContactInfo": pdf.StringLiteral(""),
		"Contents":    pdf.NewHexLiteral(pkcs7),
		"Filter":      pdf.Name("Adobe.PPKLite"),
		"Location":    pdf.StringLiteral(""),
		"M":           pdf.StringLiteral(pdf.DateString(time.Now())),
		"Name":        pdf.StringLiteral("Mr Signer"),
		"Reason":      pdf.StringLiteral(""),
		"SubFilter":   pdf.Name("adbe.pkcs7.detached"),
		"Type":        pdf.Name("Sig"),
	})

	vid, err := c.XRefTable.IndRefForNewObject(v)
	if err != nil {
		return err
	}
	formFields, _ := createAnnotation(c.XRefTable, *vid)
	acroform := pdf.Dict(map[string]pdf.Object{
		"SigFlags": pdf.Integer(3),
		"Fields":   pdf.Array{*formFields},
	})
	fid, err := c.XRefTable.IndRefForNewObject(acroform)
	if err != nil {
		return err
	}
	c.RootDict.Insert("AcroForm", *fid)

	pg, _ := c.DereferenceDictEntry(c.RootDict, "Pages")
	pgd := pg.(pdf.Dict)
	kids := pgd.ArrayEntry("Kids")
	p0, _ := c.DereferenceDict(kids[0])

	annots := pdf.Array{*formFields}
	anin, _ := c.XRefTable.IndRefForNewObject(annots)
	p0.Update("Annots", *anin)

	buf1 := bytes.NewBuffer(nil)
	pdfsign.WriteOutPdf(c, buf1)
	x1 := buf1.Bytes()
	ioutil.WriteFile("f1.pdf", x1, 0644)

	r := pdfsign.GetHashRanges(c, &v)
	h := sha256.New()
	for _, hr := range r {
		h.Write(hr)
	}
	k := h.Sum(nil)

	//fmt.Println(hex.EncodeToString(k))
	signature := pdfsign.Sign(k)
	fmt.Println(hex.EncodeToString(signature))

	c2, err := pdfcpu.ReadContextFile("f1.pdf")
	if err != nil {
		panic(err)
	}
	fmt.Println(c2)

	return nil
}

type DummySigner struct {
	pdf.Signer
}

func (d DummySigner) EstimateSignatureLength() int {
	return 100
}

func (d DummySigner) Sign(r io.Reader) ([]byte, error) {
	h := sha256.New()
	_, err := io.Copy(h, r)
	if err != nil {
		return nil, err
	}
	fmt.Println(hex.EncodeToString(h.Sum(nil)))
	return []byte{1, 2, 3, 4, 5}, nil
}

type Pkcs7Signer struct {
	pdf.Signer
}

func (s Pkcs7Signer) EstimateSignatureLength() int {
	return 10000
}

func (s Pkcs7Signer) Sign(r io.Reader) ([]byte, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}
	return pdfsign.Sign(b), nil
}

type TsaSigner struct {
	pdf.Signer
	Url string
}

func (s TsaSigner) EstimateSignatureLength() int {
	return 10000
}

func (s TsaSigner) Sign(r io.Reader) ([]byte, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}
	h := sha256.New()
	h.Write(b)
	digest := h.Sum(nil)
	tsa := rfc3161.NewClient(s.Url)
	tsq, err := rfc3161.NewTimeStampReq(crypto.SHA256, digest[:])
	tsq.CertReq = true
	if err != nil {
		return nil, err
	}
	//fmt.Println(tsq)
	//fmt.Println(tsa)
	tsr, err := tsa.Do(tsq)
	if err != nil {
		return nil, err
	}
	// Marshal the Signed Attributes
	sig, err := asn1.Marshal(tsr.TimeStampToken)
	if err != nil {
		return nil, err
	}
	fmt.Println(tsr.Status)
	fmt.Println(tsr.TimeStampToken)
	fmt.Println(hex.EncodeToString(sig))
	return sig, nil
}

func Two() error {
	// Create a signed version of inFile.

	if len(os.Args) != 3 {
		panic("usage: xxx test.pdf out.pdf")
	}
	inFile := os.Args[1]
	outFile := os.Args[2]
	fmt.Println(inFile, outFile)
	//signer := Pkcs7Signer{}
	signer := TsaSigner{Url: "https://freetsa.org/tsr"}
	err := pdfcpu.TimestampFile(inFile, outFile, nil, signer)
	if err == pdf.ErrHasAcroForm {
		log.Println("already has an AcroForm")
		return err
	}
	return err
}

func main() {
	PDFCPULog.SetDefaultCLILogger()
	//PDFCPULog.SetDefaultTraceLogger()
	//PDFCPULog.SetDefaultParseLogger()
	//PDFCPULog.SetDefaultReadLogger()
	PDFCPULog.SetDefaultValidateLogger()
	PDFCPULog.SetDefaultOptimizeLogger()
	//PDFCPULog.SetDefaultWriteLogger()

	//err := doSign()
	err := Two()
	if err != nil {
		panic(err)
	}
}
